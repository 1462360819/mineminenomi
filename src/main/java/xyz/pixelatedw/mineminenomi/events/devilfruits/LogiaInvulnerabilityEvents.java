package xyz.pixelatedw.mineminenomi.events.devilfruits;

import java.util.Arrays;
import java.util.List;

import net.minecraft.entity.Entity;
import net.minecraft.entity.LivingEntity;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.item.ItemStack;
import net.minecraft.util.DamageSource;
import net.minecraft.util.ResourceLocation;
import net.minecraftforge.event.entity.living.LivingAttackEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;
import xyz.pixelatedw.mineminenomi.abilities.haki.BusoshokuHakiFullBodyHardeningAbility;
import xyz.pixelatedw.mineminenomi.abilities.haki.BusoshokuHakiHardeningAbility;
import xyz.pixelatedw.mineminenomi.api.helpers.AbilityHelper;
import xyz.pixelatedw.mineminenomi.api.helpers.DevilFruitHelper;
import xyz.pixelatedw.mineminenomi.api.helpers.ItemsHelper;
import xyz.pixelatedw.mineminenomi.config.CommonConfig;
import xyz.pixelatedw.mineminenomi.data.entity.devilfruit.DevilFruitCapability;
import xyz.pixelatedw.mineminenomi.data.entity.devilfruit.IDevilFruit;
import xyz.pixelatedw.mineminenomi.entities.projectiles.extra.KairosekiBulletProjectile;
import xyz.pixelatedw.mineminenomi.init.ModAbilities;
import xyz.pixelatedw.mineminenomi.init.ModBlocks;
import xyz.pixelatedw.mineminenomi.init.ModResources;
import xyz.pixelatedw.mineminenomi.particles.effects.ParticleEffect;
import xyz.pixelatedw.mineminenomi.particles.effects.common.LogiaParticleEffect;
import xyz.pixelatedw.wypi.APIConfig;
import xyz.pixelatedw.wypi.WyHelper;
import xyz.pixelatedw.wypi.abilities.Ability;
import xyz.pixelatedw.wypi.abilities.projectiles.AbilityProjectileEntity;
import xyz.pixelatedw.wypi.data.ability.AbilityDataCapability;
import xyz.pixelatedw.wypi.data.ability.IAbilityData;

@Mod.EventBusSubscriber(modid = APIConfig.PROJECT_ID)
public class LogiaInvulnerabilityEvents
{

	private static final List<DamageSource> INVULNERABLE_SOURCES = Arrays.asList(DamageSource.CACTUS, DamageSource.SWEET_BERRY_BUSH, DamageSource.ANVIL, DamageSource.FLY_INTO_WALL, DamageSource.FALL, DamageSource.FALLING_BLOCK);

	@SubscribeEvent
	public static void onEntityAttackEvent(LivingAttackEvent event)
	{
		if (!CommonConfig.instance.isLogiaInvulnerabilityEnabled() || event.getEntityLiving().world.isRemote)
			return;

		LivingEntity entity = event.getEntityLiving();
		DamageSource damageSource = event.getSource();
		Entity trueSource = damageSource.getTrueSource();
		Entity instantSource = damageSource.getImmediateSource();

		IDevilFruit devilFruitProps = DevilFruitCapability.get(entity);
		boolean entityIsLogia = devilFruitProps.isLogia() && !devilFruitProps.hasYamiPower();
		
		boolean attackerIsLogia = false;
		boolean attackerHasHaki = false;
		
		if (trueSource instanceof LivingEntity)
		{
			attackerIsLogia = DevilFruitCapability.get((LivingEntity) trueSource).isLogia();
			ItemStack heldItem = ((LivingEntity) trueSource).getHeldItemMainhand();
			
			boolean goroAttackFlag = DevilFruitHelper.hasDevilFruit(entity, ModAbilities.GOMU_GOMU_NO_MI) && DevilFruitHelper.hasDevilFruit((LivingEntity) trueSource, ModAbilities.GORO_GORO_NO_MI);
			boolean gomuAttackFlag = DevilFruitHelper.hasDevilFruit(entity, ModAbilities.GORO_GORO_NO_MI) && DevilFruitHelper.hasDevilFruit((LivingEntity) trueSource, ModAbilities.GOMU_GOMU_NO_MI);

			if(goroAttackFlag)
			{
				event.setCanceled(true);
				return;
			}
			else if(gomuAttackFlag)
			{
				return;
			}
			
			boolean attackerHasKairosekiWeapon = ItemsHelper.isKairosekiWeapon(heldItem);

			if (trueSource instanceof PlayerEntity)
			{
				IAbilityData attackerAbilityProps = AbilityDataCapability.get((LivingEntity) trueSource);
				Ability busoHaki = attackerAbilityProps.getEquippedAbility(BusoshokuHakiHardeningAbility.INSTANCE);
				boolean hasBusoHakiActive = (busoHaki != null && busoHaki.isContinuous());
				Ability fullBodyBusoHaki = attackerAbilityProps.getEquippedAbility(BusoshokuHakiFullBodyHardeningAbility.INSTANCE);
				boolean hasFullBodyBusoHakiActive = (fullBodyBusoHaki != null && fullBodyBusoHaki.isContinuous());
				attackerHasHaki = hasBusoHakiActive || hasFullBodyBusoHakiActive;
			}		

			if (entityIsLogia && !kairosekiChecks(entity) && !attackerHasKairosekiWeapon && !attackerHasHaki)
			{
				ResourceLocation texture = null;

				if (DevilFruitHelper.hasDevilFruit(entity, ModAbilities.MERA_MERA_NO_MI))
					texture = ModResources.MERA;
				else if (DevilFruitHelper.hasDevilFruit(entity, ModAbilities.HIE_HIE_NO_MI))
					texture = ModResources.HIE;
				else if (DevilFruitHelper.hasDevilFruit(entity, ModAbilities.PIKA_PIKA_NO_MI))
					texture = ModResources.PIKA;
				else if (DevilFruitHelper.hasDevilFruit(entity, ModAbilities.GORO_GORO_NO_MI))
					texture = ModResources.GORO;
				else if (DevilFruitHelper.hasDevilFruit(entity, ModAbilities.MOKU_MOKU_NO_MI))
					texture = ModResources.MOKU2;
				else if (DevilFruitHelper.hasDevilFruit(entity, ModAbilities.SUNA_SUNA_NO_MI))
					texture = ModResources.SUNA2;
				else if (DevilFruitHelper.hasDevilFruit(entity, ModAbilities.MAGU_MAGU_NO_MI))
					texture = ModResources.MERA;
				else if (DevilFruitHelper.hasDevilFruit(entity, ModAbilities.GASU_GASU_NO_MI))
					texture = ModResources.GASU;
				else if (DevilFruitHelper.hasDevilFruit(entity, ModAbilities.YUKI_YUKI_NO_MI))
					texture = ModResources.YUKI;

				ParticleEffect effect = new LogiaParticleEffect(texture);
				effect.spawn(entity.world, entity.posX, entity.posY, entity.posZ, 0, 0, 0);
				event.setCanceled(true);
			}
		}

		if (instantSource instanceof KairosekiBulletProjectile || (instantSource instanceof AbilityProjectileEntity && attackerIsLogia && CommonConfig.instance.isLogiaHurtsLogiasEnabled()) || (damageSource.isExplosion() && attackerHasHaki))
		{
			event.setCanceled(false);
		}
		else
		{
			for (DamageSource s : INVULNERABLE_SOURCES)
			{
				if (damageSource.equals(s))
					event.setCanceled(true);
			}
			if (damageSource.isExplosion())
				event.setCanceled(true);
		}
	}

	private static boolean kairosekiChecks(LivingEntity entity)
	{
		if (entity instanceof PlayerEntity)
		{
			PlayerEntity playerEntity = (PlayerEntity) entity;
			return AbilityHelper.isNearbyKairoseki(playerEntity);
		}
		else
		{
			return WyHelper.isBlockNearby(entity, 3, ModBlocks.KAIROSEKI, ModBlocks.KAIROSEKI_ORE, ModBlocks.KAIROSEKI_BARS);
		}
	}
}
