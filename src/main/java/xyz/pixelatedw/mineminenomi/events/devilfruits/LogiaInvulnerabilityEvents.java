package xyz.pixelatedw.mineminenomi.events.devilfruits;

import net.minecraft.entity.Entity;
import net.minecraft.entity.LivingEntity;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.entity.projectile.ArrowEntity;
import net.minecraft.item.ItemStack;
import net.minecraft.util.DamageSource;
import net.minecraft.util.ResourceLocation;
import net.minecraftforge.event.entity.living.LivingAttackEvent;
import net.minecraftforge.event.entity.living.LivingEvent.LivingUpdateEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;
import xyz.pixelatedw.mineminenomi.abilities.haki.BusoshokuHakiFullBodyHardeningAbility;
import xyz.pixelatedw.mineminenomi.abilities.haki.BusoshokuHakiHardeningAbility;
import xyz.pixelatedw.mineminenomi.api.helpers.AbilityHelper;
import xyz.pixelatedw.mineminenomi.api.helpers.ItemsHelper;
import xyz.pixelatedw.mineminenomi.config.CommonConfig;
import xyz.pixelatedw.mineminenomi.data.entity.devilfruit.DevilFruitCapability;
import xyz.pixelatedw.mineminenomi.data.entity.devilfruit.IDevilFruit;
import xyz.pixelatedw.mineminenomi.entities.projectiles.extra.KairosekiBulletProjectile;
import xyz.pixelatedw.mineminenomi.entities.projectiles.extra.NormalBulletProjectile;
import xyz.pixelatedw.mineminenomi.init.ModBlocks;
import xyz.pixelatedw.mineminenomi.init.ModResources;
import xyz.pixelatedw.mineminenomi.particles.effects.ParticleEffect;
import xyz.pixelatedw.mineminenomi.particles.effects.common.LogiaParticleEffect;
import xyz.pixelatedw.wypi.APIConfig;
import xyz.pixelatedw.wypi.WyHelper;
import xyz.pixelatedw.wypi.abilities.Ability;
import xyz.pixelatedw.wypi.abilities.projectiles.AbilityProjectileEntity;
import xyz.pixelatedw.wypi.data.ability.AbilityDataCapability;
import xyz.pixelatedw.wypi.data.ability.IAbilityData;

@Mod.EventBusSubscriber(modid = APIConfig.PROJECT_ID)
public class LogiaInvulnerabilityEvents {

    @SubscribeEvent
    public static void onEntityAttackEvent(LivingAttackEvent event) {
        if (!CommonConfig.instance.isLogiaInvulnerabilityEnabled()) return;

        LivingEntity entity = event.getEntityLiving();
        DamageSource damageSource = event.getSource();
        Entity trueSource = damageSource.getTrueSource();
        Entity instantSource = damageSource.getImmediateSource();

        IDevilFruit devilFruitProps = DevilFruitCapability.get(entity);
        boolean entityIsLogia = devilFruitProps.isLogia() && !devilFruitProps.hasYamiPower();
        if(!entityIsLogia) return;
        boolean attackerIsLogia = false;

        if (trueSource instanceof LivingEntity) {
            ItemStack heldItem = ((LivingEntity) trueSource).getHeldItemMainhand();
            boolean attackerHasKairosekiWeapon = ItemsHelper.isKairosekiWeapon(heldItem);
            boolean attackerHasHaki = false;

            if (trueSource instanceof PlayerEntity) {
                IAbilityData attackerAbilityProps = AbilityDataCapability.get((LivingEntity) trueSource);
                Ability busoHaki = attackerAbilityProps.getEquippedAbility(BusoshokuHakiHardeningAbility.INSTANCE);
                boolean hasBusoHakiActive = (busoHaki != null && busoHaki.isContinuous());
                Ability fullBodyBusoHaki = attackerAbilityProps.getEquippedAbility(BusoshokuHakiFullBodyHardeningAbility.INSTANCE);
                boolean hasFullBodyBusoHakiActive = (fullBodyBusoHaki != null && fullBodyBusoHaki.isContinuous());
                attackerHasHaki = hasBusoHakiActive || hasFullBodyBusoHakiActive;
            }

            if (!kairosekiChecks(entity)) {
                attackerIsLogia = DevilFruitCapability.get((LivingEntity) trueSource).isLogia();
                if (!attackerHasKairosekiWeapon && !attackerHasHaki) {
                    ResourceLocation texture = ModResources.MERA;

                    if (devilFruitProps.getDevilFruit().equalsIgnoreCase("mera_mera"))
                        texture = ModResources.MERA;
                    else if (devilFruitProps.getDevilFruit().equalsIgnoreCase("hie_hie"))
                        texture = ModResources.HIE;
                    else if (devilFruitProps.getDevilFruit().equalsIgnoreCase("pika_pika"))
                        texture = ModResources.PIKA;
                    else if (devilFruitProps.getDevilFruit().equalsIgnoreCase("goro_goro"))
                        texture = ModResources.GORO;
                    else if (devilFruitProps.getDevilFruit().equalsIgnoreCase("moku_moku"))
                        texture = ModResources.MOKU2;
                    else if (devilFruitProps.getDevilFruit().equalsIgnoreCase("suna_suna"))
                        texture = ModResources.SUNA2;
                    else if (devilFruitProps.getDevilFruit().equalsIgnoreCase("magu_magu"))
                        texture = ModResources.MERA;
                    else if (devilFruitProps.getDevilFruit().equalsIgnoreCase("gasu_gasu"))
                        texture = ModResources.GASU;
                    else if (devilFruitProps.getDevilFruit().equalsIgnoreCase("yuki_yuki"))
                        texture = ModResources.YUKI;

                    ParticleEffect effect = new LogiaParticleEffect(texture);
                    effect.spawn(entity.world, entity.posX, entity.posY, entity.posZ, 0, 0, 0);
                    event.setCanceled(true);
                }
            }
        }

        if (instantSource instanceof ArrowEntity || instantSource instanceof NormalBulletProjectile || damageSource.equals(DamageSource.ANVIL) || damageSource.equals(DamageSource.CACTUS) || damageSource.equals(DamageSource.SWEET_BERRY_BUSH)) {
            event.setCanceled(true);
        } else if (instantSource instanceof KairosekiBulletProjectile || (instantSource instanceof AbilityProjectileEntity && attackerIsLogia && CommonConfig.instance.isLogiaHurtsLogiasEnabled())) {
            event.setCanceled(false);
        }

    }

    @SubscribeEvent
    public static void onEntityUpdate(LivingUpdateEvent event) {
        if (!(event.getEntityLiving() instanceof LivingEntity))
            return;

        LivingEntity player = event.getEntityLiving();
        IDevilFruit devilFruitProps = DevilFruitCapability.get(player);

        if (!devilFruitProps.isLogia())
            return;

        player.fallDistance = 0;
    }

    private static boolean kairosekiChecks(LivingEntity entity) {
        if (entity instanceof PlayerEntity) {
            PlayerEntity playerEntity = (PlayerEntity) entity;
            return AbilityHelper.isNearbyKairoseki(playerEntity);
        } else {
            return WyHelper.isBlockNearby(entity, 3, ModBlocks.KAIROSEKI, ModBlocks.KAIROSEKI_ORE, ModBlocks.KAIROSEKI_BARS);
        }
    }
}
